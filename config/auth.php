<?php

/**
 * @link https://readouble.com/laravel/9.x/ja/authentication.html
 */
return [

    /*
    |--------------------------------------------------------------------------
    | 認証の既定値
    |--------------------------------------------------------------------------
    |
    | このオプションは，アプリケーションのデフォルトの認証「guard」および
    | パスワードリセットオプションを制御します．これらのデフォルトは必要に応じて
    | 変更することができますが，ほとんどのアプリケーションで完璧なスタートを
    | 切ることができます．
    |
    */

    'defaults' => [
        'guard' => 'web',
        'passwords' => 'users',
    ],

    /*
    |--------------------------------------------------------------------------
    | 認証ガード
    |--------------------------------------------------------------------------
    |
    | 次に，あなたのアプリケーションのために，あらゆる認証ガードを定義することが
    | できます．もちろん，セッションストレージとEloquentユーザープロバイダを
    | 使用する素晴らしいデフォルト構成がここで定義されています．
    |
    | すべての認証ドライバには，ユーザープロバイダがあります．このプロバイダは，
    | データベースやその他のストレージから実際にユーザーを取得する方法を定義します．
    |
    | Supported: "session"
    |
    */

    'guards' => [
        'web' => [
            'driver' => 'session',
            'provider' => 'users',
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | ユーザープロバイダー
    |--------------------------------------------------------------------------
    |
    | すべての認証ドライバには，ユーザープロバイダがあります．このプロバイダは，
    | データベースやその他のストレージから実際にユーザーを取得する方法を定義します．
    |
    | 複数のユーザ・テーブルまたはモデルがある場合，各モデル/テーブルを表す複数の
    | ソースを構成することができます．これらのソースは，あなたが定義した追加の
    | 認証ガードに割り当てることができます．
    |
    | Supported: "database", "eloquent"
    |
    */

    'providers' => [
        'users' => [
            'driver' => 'eloquent',
            'model' => App\Models\User::class,
        ],

        // 'users' => [
        //     'driver' => 'database',
        //     'table' => 'users',
        // ],
    ],

    /*
    |--------------------------------------------------------------------------
    | パスワードのリセット
    |--------------------------------------------------------------------------
    |
    | アプリケーションに複数のユーザーテーブルまたはモデルがあり，特定の
    | ユーザータイプに基づいてパスワードリセットを個別に設定したい場合，
    | 複数のパスワードリセット設定を指定することができます．
    |
    | 有効期限は，各リセット・トークンが有効とみなされる時間（分）です．
    | このセキュリティ機能により，トークンは短命に保たれ，推測される時間が
    | 少なくなります．必要に応じて変更することができます．
    |
    */

    'passwords' => [
        'users' => [
            'provider' => 'users',
            'table' => 'password_resets',
            'expire' => 60,
            'throttle' => 60,
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | パスワード確認タイムアウト
    |--------------------------------------------------------------------------
    |
    | ここでは，パスワードの確認がタイムアウトし，ユーザーが確認画面でパスワードの
    | 再入力を求められるまでの秒数を定義することができます．
    | デフォルトでは，このタイムアウトは3時間続きます．
    |
    */

    'password_timeout' => 10800,

];
