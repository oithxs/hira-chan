<?php

use Illuminate\Support\Str;

/**
 * @link https://readouble.com/laravel/9.x/ja/session.html
 */
return [

    /*
    |--------------------------------------------------------------------------
    | デフォルトのセッションドライバ
    |--------------------------------------------------------------------------
    |
    | このオプションは，リクエスト時に使用するデフォルトのセッション「driver」を
    | 制御します．デフォルトでは軽量のネイティブドライバを使いますが，ここで
    | 提供されている他の素晴らしいドライバを指定することもできます．
    |
    | Supported: "file", "cookie", "database", "apc",
    |            "memcached", "redis", "dynamodb", "array"
    |
    */

    'driver' => env('SESSION_DRIVER', 'database'),

    /*
    |--------------------------------------------------------------------------
    | セッション存続期間
    |--------------------------------------------------------------------------
    |
    | ここでは，セッションが失効する前にアイドル状態にしておきたい分数を指定することが
    | できます．ブラウザを閉じたときに即座に終了させたい場合は，このオプションを
    | 設定します．
    |
    */

    'lifetime' => env('SESSION_LIFETIME', 120),

    'expire_on_close' => false,

    /*
    |--------------------------------------------------------------------------
    | セッションの暗号化
    |--------------------------------------------------------------------------
    |
    | このオプションを使用すると，すべてのセッションデータが保存される前に暗号化
    | されるように簡単に指定することができます．すべての暗号化はLaravelによって
    | 自動的に実行され，通常のようにセッションを使用することができます．
    |
    */

    'encrypt' => false,

    /*
    |--------------------------------------------------------------------------
    | セッションファイルの場所
    |--------------------------------------------------------------------------
    |
    | ネイティブセッションドライバを使用する場合，セッションファイルを保存する場所が
    | 必要です．デフォルトが設定されていますが，別の場所を指定することもできます．
    | これは，ファイルセッションにのみ必要です．
    |
    */

    'files' => storage_path('framework/sessions'),

    /*
    |--------------------------------------------------------------------------
    | セッションデータベース接続
    |--------------------------------------------------------------------------
    |
    | 「database」や「redis」セッションドライバを使用する場合，これらのセッションを
    | 管理するために使用する接続を指定することができます．これは，データベースの
    | 設定オプションにある接続に対応するものでなければなりません．
    |
    */

    'connection' => env('SESSION_CONNECTION', null),

    /*
    |--------------------------------------------------------------------------
    | セッションデータベースのテーブル
    |--------------------------------------------------------------------------
    |
    | 「database」セッションドライバを使用する場合，セッションを管理するために
    | 使用するテーブルを指定することができます．もちろん，適切なデフォルト値が
    | 用意されていますが，必要に応じて自由に変更することができます．
    |
    */

    'table' => 'sessions',

    /*
    |--------------------------------------------------------------------------
    | セッションキャッシュストア
    |--------------------------------------------------------------------------
    |
    | フレームワークのキャッシュ駆動型セッションバックエンドを使用している間は，
    | これらのセッションに使用するキャッシュストアをリストアップすることができます．
    | この値は，アプリケーションで設定したキャッシュの「stores」のひとつと
    | 一致しなければなりません．
    |
    | Affects: "apc", "dynamodb", "memcached", "redis"
    |
    */

    'store' => env('SESSION_STORE', null),

    /*
    |--------------------------------------------------------------------------
    | Session Sweeping Lottery
    |--------------------------------------------------------------------------
    |
    | セッションドライバの中には，ストレージから古いセッションを取り除くために，手動で
    | ストレージの場所を掃除しなければならないものがあります．ここでは，与えられた
    | リクエストでそれが起こる確率を示します．デフォルトでは，確率は100のうち2です．
    |
    */

    'lottery' => [2, 100],

    /*
    |--------------------------------------------------------------------------
    | セッションクッキー名
    |--------------------------------------------------------------------------
    |
    | ここでは，セッションインスタンスをIDで識別するために使用されるクッキーの名前を
    | 変更することができます．ここで指定した名前は，フレームワークが各ドライバーの
    | ために新しいセッションクッキーを作成するたびに使用されます．
    |
    */

    'cookie' => env(
        'SESSION_COOKIE',
        Str::slug(env('APP_NAME', 'laravel'), '_') . '_session'
    ),

    /*
    |--------------------------------------------------------------------------
    | セッションクッキーのパス
    |--------------------------------------------------------------------------
    |
    | セッション・クッキーのパスは，クッキーが利用可能であるとみなされるパスを
    | 決定します．通常，これはアプリケーションのルート・パスになりますが，必要に
    | 応じて自由に変更できます．
    |
    */

    'path' => '/',

    /*
    |--------------------------------------------------------------------------
    | セッションクッキードメイン
    |--------------------------------------------------------------------------
    |
    | ここでは，アプリケーションのセッションを識別するために使用されるクッキーの
    | ドメインを変更することができます．これはアプリケーションがどのドメインで
    | クッキーを利用できるかを決定します．賢明なデフォルトが設定されています．
    |
    */

    'domain' => env('SESSION_DOMAIN', null),

    /*
    |--------------------------------------------------------------------------
    | HTTPS専用クッキー
    |--------------------------------------------------------------------------
    |
    | このオプションをtrueに設定すると，ブラウザがHTTPS接続の場合にのみ，
    | セッションクッキーがサーバーに送り返されるようになります．これにより，
    | 安全に行えない場合にクッキーが送信されるのを防ぐことができます．
    |
    */

    'secure' => env('SESSION_SECURE_COOKIE'),

    /*
    |--------------------------------------------------------------------------
    | HTTPアクセスのみ
    |--------------------------------------------------------------------------
    |
    | この値をtrueに設定すると，JavaScriptがCookieの値にアクセスできなくなり，
    | CookieはHTTPプロトコルのみでアクセスできるようになります．このオプションは，
    | 必要に応じて自由に変更することができます．
    |
    */

    'http_only' => true,

    /*
    |--------------------------------------------------------------------------
    | Same-Site Cookies
    |--------------------------------------------------------------------------
    |
    | このオプションは，クロスサイトリクエストが行われたときのクッキーの動作を決定し，
    | CSRF攻撃を緩和するために使用することができます．デフォルトでは，この値は安全な
    | デフォルト値であるため，「lax」に設定することにします．
    |
    | Supported: "lax", "strict", "none", null
    |
    */

    'same_site' => 'lax',

];
